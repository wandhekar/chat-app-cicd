name: Chat App CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]  # Added feature branch for testing
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: chat-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Job 1: Test the application
  test:
    runs-on: ubuntu-latest
    name: üß™ Test Application
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üîç Lint Code
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app_ollama.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat warnings as informational
        flake8 app_ollama.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: ‚úÖ Basic App Test
      run: |
        # Test if the app imports without errors
        python -c "import app_ollama; print('‚úÖ App imports successfully')"

  # Job 2: Build and push Docker image (only on main branch)
  build:
    runs-on: ubuntu-latest
    name: üê≥ Build Docker Image
    needs: test
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        
    - name: üèóÔ∏è Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to staging/development
  deploy:
    runs-on: ubuntu-latest
    name: üöÄ Deploy Application
    needs: [test, build]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üìù Create Deployment Summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        
    - name: üí¨ Add Deployment Comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      with:
        script: |
          const image = `${process.env.DOCKER_USERNAME}/${process.env.IMAGE_NAME}:${process.env.IMAGE_TAG}`;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `üöÄ **Deployment Successful!**

            **Docker Image:** \`${image}\`
            
            **To deploy locally:**
            \`\`\`bash
            # Pull the new image
            docker pull ${image}
            
            # Update Kubernetes deployment
            kubectl set image deployment/chat-app-deployment chat-app=${image}
            \`\`\`
            `
          })

  # Job 4: Security scan
  security:
    runs-on: ubuntu-latest
    name: üîí Security Scan
    needs: build
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîç Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: üìä Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'